#BEGIN CONFIG INFO
#DESCR: Configuracion optimizada para ser eficiente en produccion con 4G exclusivos para MySQL
#TYPE: SYSTEM
#END CONFIG INFO
#AUTOR: Ing. J. Pedraza | printepolis@gmail.com

# Comparto esta configuracion en aras de que les sirva y puedan mejorarla
# y compartirla para obtener una mejor performance en Mysql 
# No deje de leer la documentacion: http://dev.mysql.com/doc/mysql/en/option-files.html
#


#Configuraciones basicas:
[client]
#password	= [your_password]
port		= 3306
socket		= /tmp/mysql.sock

[mysqld]
# generic configuration options
port		= 3306
socket		= /tmp/mysql.sock


# back_log es la cantidad de conexiones que el sistema operativo puede mantener en
# la cola de escucha, antes de que el hilo del administrador de conexión tenga
# los procesó. Si tienes una tasa de conexión y experiencia muy altas
# errores de "conexión rechazada", es posible que deba aumentar este valor.
# Compruebe la documentación de su SO para obtener el valor máximo de este parámetro.
# Intentando establecer back_log por encima del límite de tu sistema operativo
# no tendrá ningún efecto, verifica en tu sistema.
back_log = 50

# La cantidad máxima de sesiones simultáneas que el servidor MySQL puede
# permitir. RECUERDA que Una de estas conexiones estará reservada para un usuario con
# SUPER privilegios para permitir que el administrador inicie sesión incluso si el
# se ha alcanzado el límite de conexión.
max_connections = 100


# Cantidad máxima de errores permitidos por host. Si se alcanza este límite,
# el host se bloqueará para conectarse al servidor MYSQL hasta
# "FLUSH HOSTS" se ejecutó o el servidor se reinició. Inválido
# contraseñas y otros errores durante la fase de conexión resultan en
# aumentando este valor. Consulte la variable de estado "Aborted_connects" para
# contador global.
max_connect_errors = 10

# La cantidad de tablas abiertas para todos los hilos. Aumentando este valor
# aumenta la cantidad de descriptores de archivos que mysqld requiere.
# Por lo tanto, debe asegurarse de establecer la cantidad de archivos abiertos
# permitido a al menos 4096(4G RAM) en la variable "open-files-limit" en
# sección [mysqld_safe]
table_open_cache = 2048

# Habilite el bloqueo de nivel de archivo externo. El bloqueo de archivos habilitado tendrá un
# impacto negativo en el rendimiento, así que solo úsela en caso de que tenga
# varias instancias de bases de datos que se ejecutan en los mismos archivos (tenga en cuenta
# ¡aún se aplican restricciones!) o si usa otro software que confía en
# bloqueo de tablas MyISAM en el nivel de archivo. (NO RECOMENDADO, pero lo pongo por si lo ocupas)
#external-locking


# El tamaño máximo de un paquete de consulta que el servidor puede manejar, así como
# servidor de tamaño de consulta máximo puede procesar (Importante cuando se trabaja con
# BLOBs grandes). ampliado dinámicamente, para cada conexión, lo puedes hacer a travez de tu codigo
# Lee como hacerlo http://php.net/manual/es/mysqli.options.php
# Si trabajas con BLOBs, cuidar el tamaño aceptado que no supere este valor.
max_allowed_packet = 100M

# El tamaño de la memoria caché para contener las instrucciones SQL para el registro binario
# durante una transacción. Si a menudo usa una declaración grande y múltiple
# transacciones, puede aumentar este valor para obtener más rendimiento. Todas
# declaraciones de transacciones se almacenan en búfer en el caché de registro binario y
# se están escribiendo en el registro binario de una vez después de COMMIT. Si el
# transaction es más grande que este valor, se usa el archivo temporal en el disco
# en cambio. Este buffer se asigna por conexión en la primera actualización
# declaración en la transacción; contemplar el Cache de disco y no superarlo.
# incluso recomiendo un 50%, como maximo ya que puede mermar el rendimiento.
binlog_cache_size = 1M

# Tamaño máximo permitido para una sola tabla HEAP (en memoria). Esta opción
# es una protección contra la creación accidental de un HEAP muy grande
# table que de lo contrario podría agotar todos los recursos de memoria.
max_heap_table_size = 64M


# Tamaño del búfer utilizado para realizar exploraciones de tabla completa.
# Asignado por hilo, si se necesita un escaneo completo.
read_buffer_size = 20M

# Al leer las filas en orden ordenado después de una clasificación, las filas se leen
# a través de este búfer para evitar búsquedas de disco. Puedes mejorar ORDER BY
# rendimiento mucho, si establece esto a un valor alto.
# Asignado por hilo, cuando sea necesario.
read_rnd_buffer_size = 500M

# Sort buffer se utiliza para realizar ordenaciones para algunos ORDER BY y GROUP BY
# consultas. Si los datos clasificados no caben en el búfer de clasificación, un disco
# En su lugar, se usa el tipo de combinación basada en # - Consulte "Sort_merge_passes"
# variable de estado Asignado por hilo si es necesario ordenar.
sort_buffer_size = 500M

# Este buffer se usa para la optimización de JOINs completos (JOINs sin
# índices). Tales JOIN son muy malos para el rendimiento en la mayoría de los casos
# de todos modos, pero establecer esta variable en un valor grande reduce la
# impacto en el rendimiento. Ver la variable de estado "Select_full_join" para un
# conteo de uniones completas. Asignado por hilo si se encuentra la unión completa
join_buffer_size = 50M

# Cuantos hilos debemos mantener en un caché para su reutilización. Cuando un cliente
# desconecta, los hilos del cliente se ponen en el caché si no hay
# más que hilos thread_cache_size desde antes. Esto reduce enormemente
# la cantidad de creaciones de hilo necesarias si tiene muchas nuevas
# conexiones. (Normalmente esto no da un rendimiento notable
# mejora si tiene una buena implementación de subprocesos). Nucleos!
thread_cache_size = 2

# Esto permite que la aplicación dé al sistema de hilos una pista para el
# cantidad deseada de hilos que deberían ejecutarse al mismo tiempo. Esta
# valor solo tiene sentido en sistemas que admiten thread_concurrency ()
# llamada de función (Sun Solaris, por ejemplo).
# Checar cuantos nucleos tienes abiertos en tu SO, [número de CPU] * (2..4) para thread_concurrency
thread_concurrency = 2

# Query Cache se utiliza para almacenar en caché los resultados de SELECT y luego devolverlos
# sin ejecución real de la misma consulta una vez más. Tener la consulta
# caché habilitada puede dar como resultado mejoras de velocidad significativas, si
# tiene muchas consultas idénticas y rara vez cambia de tablas. Ver el
# "Variable de estado" Qcache_lowmem_prunes "para verificar si el valor actual
# es lo suficientemente alto para su carga.
# Nota: en caso de que sus tablas cambien con mucha frecuencia o si sus consultas son
# textualmente diferente cada vez, la caché de consultas puede dar como resultado
# desaceleración en lugar de una mejora en el rendimiento.
query_cache_size = 128M

# Solo conjuntos de resultados de caché que son más pequeños que este límite. Esto es para
# proteger la caché de consultas de un conjunto de resultados muy grande que sobrescribe todo
# otros resultados de consulta.
query_cache_limit = 8M

# Longitud de palabra mínima para ser indexada por el índice de búsqueda de texto completo.
# Es posible que desee disminuirlo si necesita buscar palabras más cortas.
# Tenga en cuenta que debe volver a generar su índice FULLTEXT, después de tener
# modificó este valor.
ft_min_word_len = 4

# Si su sistema admite la llamada a la función memlock (), es posible que desee
# habilitar esta opción mientras se ejecuta MariaDB para mantenerlo bloqueado en la memoria y
# para evitar el posible intercambio en caso de alta presión de memoria. Bueno
# para el rendimiento.
#memlock

# Tipo de tabla que se utiliza de forma predeterminada al crear nuevas tablas, si no
# especificado de forma diferente durante la sentencia CREATE TABLE
default-storage-engine = MYISAM

# Tamaño de pila de subprocesos para usar. Esta cantidad de memoria siempre se reserva en
# Tiempo de conección. MariaDB generalmente no necesita más de 64 K de
# memoria, mientras que si usa su propia pila de funciones UDF hambrientas o su
# OS requiere más stack para algunas operaciones, es posible que deba configurar esto
# a un valor más alto.
thread_stack = 240K

# Establecer el nivel de aislamiento de transacción predeterminado. Los niveles disponibles son:
# READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE
transaction_isolation = REPEATABLE-READ

# Tamaño máximo para tablas temporales internas (en memoria). Si una mesa
# crece más grande que este valor, se convierte automáticamente en disco tabla basada en 
# Esta limitación es para una sola tabla. Puede haber muchos
# de ellos.
tmp_table_size = 128M

# Habilitar el registro binario. Esto es requerido para actuar como MAESTRO en un
# configuración de replicación. También necesita el registro binario si necesita
# la capacidad de hacer recuperación puntual desde su última copia de seguridad.
log-bin=mysql-bin

# binary logging format - mixed recommended
binlog_format=mixed

# Si está utilizando la replicación con esclavos encadenados (A-> B-> C), necesita
# habilitar esta opción en el servidor B. Permite el registro de las actualizaciones realizadas por
# el hilo esclavo en el registro binario del esclavo.
#log_slave_updates

# Habilite el registro completo de consultas. Cada consulta (incluso aquellas con errores
# sintaxis) que el servidor recibe se registrará. Esto es útil para
# depuración, por lo general se desactiva en el uso de producción.
#log

# Imprimir advertencias en el archivo de registro de errores. Si tienes algún problema con
# MySQL debe habilitar el registro de advertencias y examinar el registro de errores
# para posibles explicaciones.
log_warnings

# Registrar consultas lentas. Las consultas lentas son consultas que toman más que el
# cantidad de tiempo definida en "long_query_time" o que no se usa
# índices bien, si log_short_format no está habilitado. Normalmente es una buena idea
# para tener esto activado si frecuentemente agrega nuevas consultas al
# sistema.
slow_query_log

# Todas las consultas que tomen más que este tiempo (en segundos) serán
# trated como lento. No use "1" como valor aquí, ya que esto dará como resultado
# incluso consultas muy rápidas registradas de vez en cuando (como MariaDB
# actualmente mide el tiempo con la segunda precisión solamente).
# Mi performance es de 3seg, pero pondremos 4 para que nos indique cuales han superado este limite
long_query_time = 4
slow_query_log_file = /query_lentas.log;

# Directorio para almanecar querys de disco, esto es las que superan en long
# Si tienes una particion optimizada para alto rendimiento, esta es la ideal.
#tmpdir = /tmp




#*** MyISAM Specific options


# Tamaño del búfer de claves, utilizado para almacenar en caché bloques de índice para tablas MyISAM.
# No lo configure más grande que el 30% de la memoria disponible, ya que parte de la memoria
# también es requerido por el sistema operativo para almacenar en caché las filas. Incluso si no estás usando
# Tablas MyISAM, todavía debe configurarlo en 8-64M, ya que también será
# usado para tablas de disco temporales internas.
key_buffer_size = 32M

# MyISAM utiliza un caché especial similar a un árbol para hacer inserciones masivas (es decir,
# INSERTAR ... SELECCIONAR, INSERTAR ... VALORES (...), (...), ... y CARGAR DATOS
# INFILE) más rápido. Esta variable limita el tamaño del árbol de caché en
# bytes por hilo. Establecerlo en 0 desactivará esta optimización. Hacer
# no lo configura más grande que "key_buffer_size" para un rendimiento óptimo.
# Este búfer se asigna cuando se detecta una inserción masiva.
bulk_insert_buffer_size = 64M

# Este búfer se asigna cuando MariaDB necesita reconstruir el índice en
# REPARAR, OPTIMIZAR, ALTERAR declaraciones de tabla, así como en LOAD DATA INFILE
# en una tabla vacía. Se asigna por hilo así que ten cuidado con
# ajustes grandes
myisam_sort_buffer_size = 128M

# El tamaño máximo del archivo temporal que MariaDB puede usar mientras
# recreando el índice (during REPAIR, ALTER TABLE or LOAD DATA INFILE
# Si el tamaño del archivo fuera mayor que este, se creará el índice
# a través de la memoria caché de claves (que es más lenta).
myisam_max_sort_file_size = 10G

# Si una tabla tiene más de un índice, MyISAM puede usar más de uno
# hilo para repararlos ordenando en paralelo. Esto tiene sentido si
# tiene varias CPU y mucha memoria, 
myisam_repair_threads = 2

# Revisar y reparar automáticamente las tablas MyISAM no cerradas.
myisam_recover

# *** INNODB Specific options ***

# Use esta opción si tiene un servidor MariaDB con soporte InnoDB habilitado
# pero no planea usarlo. Esto ahorrará memoria y espacio en el disco
# y acelerar algunas cosas.
#skip-innodb

# Grupo de memoria adicional utilizado por InnoDB para almacenar metadatos
# información. Si InnoDB requiere más memoria para este propósito,
# comenzar a asignarlo desde el sistema operativo. Como esto es lo suficientemente rápido en la mayoría
# sistemas operativos recientes, normalmente no es necesario cambiar esto
# valor. SHOW INNODB STATUS mostrará la cantidad actual utilizada.
innodb_additional_mem_pool_size = 16M

# InnoDB, a diferencia de MyISAM, utiliza un grupo de búferes para almacenar en caché ambos índices y
# fila de datos. Cuanto más grande lo establezca, menos E / S de disco se necesita para
# acceso a datos en tablas. En un servidor de base de datos dedicado, puede configurar esto
# parámetro hasta 80% del tamaño de la memoria física de la máquina. No configurarlo
# demasiado grande, porque la competencia de la memoria física puede
# causa paginación en el sistema operativo. Tenga en cuenta que en sistemas de 32 bits usted
# podría estar limitado a 2-3.5G de memoria de nivel de usuario por proceso, por lo que no
# configurarlo demasiado alto.
# * menos consumo de de bufer de disco
innodb_buffer_pool_size = 3G

# InnoDB almacena datos en uno o más archivos de datos que forman el tablespace.
# Si tiene una unidad lógica única para sus datos, una sola
# archivo autoextendido sería lo suficientemente bueno. En otros casos, un solo archivo
# por dispositivo es a menudo una buena opción. Puede configurar InnoDB para usar raw
# particiones de disco también - consulte el manual para obtener más información
# sobre esto.
innodb_data_file_path = ibdata1:10M:autoextend

# Configure esta opción si desea que los archivos del espacio de tablas InnoDB sean
# almacenado en otra ubicación. Por defecto, este es el datadir MariaDB.
#innodb_data_home_dir = <directory>

# Número de subprocesos IO que se utilizarán para las operaciones de E / S asíncronas. Este valor es
# codificado a 8 en Unix, pero en E / S de disco de Windows se puede beneficiar de una
# número más grande.
innodb_write_io_threads = 8
innodb_read_io_threads = 8

# Si se topa con la corrupción del espacio de tabla InnoDB, configurándolo en un valor distinto de cero
# valor probablemente lo ayudará a volcar sus tablas. Comience desde el valor 1 y
# aumentarlo hasta que pueda volcar la tabla con éxito.
#innodb_force_recovery=1

# Número de subprocesos permitidos dentro del kernel InnoDB. El valor óptimo
# depende en gran medida de la aplicación, el hardware y el sistema operativo
# propiedades del planificador. Un valor demasiado alto puede llevar a una agitación de hilos.
innodb_thread_concurrency = 16

# Si se establece en 1, InnoDB vaciará (fsync) los registros de transacciones al
# disk en cada commit, que ofrece un comportamiento ACID completo. Si usted es
# dispuesto a comprometer esta seguridad, y se está ejecutando pequeño
# transacciones, puede establecer esto en 0 o 2 para reducir la E / S del disco al
# registros. El valor 0 significa que el registro solo se escribe en el archivo de registro y
# el archivo de registro se descargó en el disco aproximadamente una vez por segundo. Valor 2
# significa que el registro se escribe en el archivo de registro en cada confirmación, pero el registro
# archivo solo se vacía al disco aproximadamente una vez por segundo.
innodb_flush_log_at_trx_commit = 1

# Acelerar el apagado de InnoDB. Esto desactivará InnoDB para hacer una purga completa
# e inserte la combinación de búfer al apagar. Puede aumentar el tiempo de apagado a
# lot, pero InnoDB tendrá que hacerlo en la próxima puesta en marcha.
#innodb_fast_shutdown

# El tamaño del buffer que InnoDB usa para almacenar datos de registro. Tan pronto como
# está lleno, InnoDB tendrá que vaciarlo al disco. Como se enrojeció
# una vez por segundo de todos modos, no tiene sentido tenerlo muy grande
# (incluso con transacciones largas).
innodb_log_buffer_size = 8M

# Tamaño de cada archivo de registro en un grupo de registro. Debes establecer el tamaño combinado
# de archivos de registro a aproximadamente 25% -100% del tamaño de su grupo de búferes para evitar
# actividad de vaciado de la agrupación de almacenamiento intermedio innecesaria en sobrescribir archivo de registro. Sin embargo,
# tenga en cuenta que un tamaño de archivo de registro más grande aumentará el tiempo necesario para el
# proceso de recuperación.
innodb_log_file_size = 256M

# Número total de archivos en el grupo de registro. Un valor de 2-3 suele ser bueno
# suficiente.
innodb_log_files_in_group = 3

# Ubicación de los archivos de registro de InnoDB. El valor predeterminado es el datadir MariaDB. Tú
# puede desear apuntarlo a un disco duro dedicado o a un volumen RAID1 para
# desempeño mejorado
#innodb_log_group_home_dir

# Máximo porcentaje permitido de páginas sucias en el grupo de búferes de InnoDB.
# Si se alcanza, InnoDB comenzará a descargarlos agresivamente a
# no quedarse sin páginas limpias en absoluto. Este es un límite suave, no
# garantizado para ser sostenido.
innodb_max_dirty_pages_pct = 90

# El método de descarga InnoDB se usará para Log. El tablespace siempre usa
# doublewrite flush logic. El valor predeterminado es "fdatasync", otro
# opción es "O_DSYNC".
#innodb_flush_method=O_DSYNC

# Por cuánto tiempo debe esperar una transacción InnoDB para que se otorgue un bloqueo
# antes de retroceder. InnoDB detecta automáticamente la transacción
# deadlocks en su propia tabla de bloqueo y deshace la transacción. Si tu
# use el comando LOCK TABLES u otros motores de almacenamiento seguros para transacciones
# que InnoDB en la misma transacción, entonces puede surgir un punto muerto que
# InnoDB no puede notar. En casos como este, el tiempo de espera es útil para
# resolver la situación.
innodb_lock_wait_timeout = 120


[mysqldump]
# No almacenar en búfer todo el conjunto de resultados en la memoria antes de escribirlo en
# archivo. Requerido para volcar tablas muy grandes
rápido

max_allowed_packet = 16M

[mysql]
no-auto-rehash

# Solo permite UPDATE y DELETE que usan claves.
# safe-updates

[myisamchk]
key_buffer_size = 512M
sort_buffer_size = 512M
read_buffer = 8M
write_buffer = 8M

[mysqlhotcopy]
interactive-timeout

[mysqld_safe]
# Aumentar la cantidad de archivos abiertos permitidos por proceso. Advertencia: hacer
# ¡seguro que has establecido el límite del sistema global lo suficientemente alto! El alto valor
# es necesario para una gran cantidad de tablas abiertas
open-files-limit = 8192
